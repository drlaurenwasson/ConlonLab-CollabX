load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_Ventricular_CM_SP.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_Adipocytes.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_AtrialCM.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_Fibroblasts_SP.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_Fibroblasts.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_ImmuneCells_SP.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_ImmuneCells.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_NeuroCells.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_VascularCells_SP.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_VascularCells.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_Ventricular_CM_SP.RData")
load("~/Documents/UNC Consulting/scRNA-seq/HCA_Atlas_Ventricular_CM.RData")
setwd("~/Documents/UNC Consulting/ConlonLab-CollabX")
#Get all of the average expressions for each time point
avg<- c(mean(df$Expression[1:4]), mean(df$Expression[5:8]), mean(df$Expression[9:12]), mean(df$Expression[13:16]), mean(df$Expression[17:20]), mean(df$Expression[21:24]), mean(df$Expression[25:28]), mean(df$Expression[29:32]))
shiny::runApp()
runApp()
#Load in the collaborative cross data frame
cc_df <- read.table("https://github.com/drlaurenwasson/ConlonLab-CollabX/raw/main/files/cc_df.txt", sep = "\t")
genes<- rownames(cc_df)
cc_df2<- read.table("https://github.com/drlaurenwasson/ConlonLab-CollabX/raw/main/files/cc_df2.txt", sep = "\t")
#Get a data frame for the proteins of interest for the strains of interest
getnormalizeddata<- function(protein,strain,refstrain){
allstrains<- c("PWK", "C57", "AJ", "129", "WSB", "CAS", "NZO", "NOD")
protein<- protein[protein %in% rownames(cc_df)]
df<- as.data.frame(t(cc_df[rownames(cc_df)==protein,]))
df$strain<- c(rep("PWK",4), rep("C57",4), rep("A/J",4), rep("129",4), rep("WSB",4), rep("CAS",4), rep("NZO",4), rep("NOD",4))
df$protein<- protein
colnames(df)[1]<-"Expression"
#Get all of the average expressions for each strain
avg<- c(mean(df$Expression[1:4]), mean(df$Expression[5:8]), mean(df$Expression[9:12]), mean(df$Expression[13:16]), mean(df$Expression[17:20]), mean(df$Expression[21:24]), mean(df$Expression[25:28]), mean(df$Expression[29:32]))
names(avg)<- unique(df$strain)
df$sex<- c("M", "F", "M", "F", "F", "F", "M",
"M", "F", "M", "F", "M", "M", "M",
"F", "F", "F", "M", "F", "M", "F",
"M", "F", "M", "M", "F", "M", "F",
"M", "F", "M", "F")
df$ss<- paste(df$strain,df$sex)
#Normalize to the reference strain we want
df$Normalized<- df$Expression/(avg[names(avg) %in% refstrain])
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(df, varname="Normalized",
groupnames=c("strain", "protein"))
head(df2)
return(df2)
}
get_metadata<- reactive({
proteinstouse<- input$proteinoi
proteinstouse<-unlist(strsplit(proteinstouse, ","))
#print(proteinstouse)
return(proteinstouse)
})
get_strains<- reactive({
strainstouse<- input$strains
strainstouse<-unlist(strsplit(strainstouse, ","))
#print(strainstouse)
return(strainstouse)
})
get_normalized_strain<- reactive({
norm<- input$normstrain
#print(norm)
return(norm)
})
df2=NULL
#Update the proteins list
proteinsupdate<- get_metadata()
proteinsupdate="Myh4"
strainsupdate=c("C57", "PWK")
normalizeupdate=("C57")
for (p in {proteinsupdate}){
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
df2=rbind(df2,a)
}
}
View(df2)
return(df)
runApp()
allstrains<- c("PWK", "C57", "AJ", "129", "WSB", "CAS", "NZO", "NOD")
protein<- protein[protein %in% rownames(cc_df)]
df<- as.data.frame(t(cc_df[rownames(cc_df)==protein,]))
df$strain<- c(rep("PWK",4), rep("C57",4), rep("A/J",4), rep("129",4), rep("WSB",4), rep("CAS",4), rep("NZO",4), rep("NOD",4))
for (p in {proteinsupdate}){
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
b<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
df2=rbind(df,b)
}
}
#Get a data frame for the proteins of interest for the strains of interest
getdata<- function(protein,strain,refstrain){
allstrains<- c("PWK", "C57", "AJ", "129", "WSB", "CAS", "NZO", "NOD")
protein<- protein[protein %in% rownames(cc_df)]
df<- as.data.frame(t(cc_df[rownames(cc_df)==protein,]))
df$strain<- c(rep("PWK",4), rep("C57",4), rep("A/J",4), rep("129",4), rep("WSB",4), rep("CAS",4), rep("NZO",4), rep("NOD",4))
df$protein<- protein
colnames(df)[1]<-"Expression"
#Get all of the average expressions for each strain
avg<- c(mean(df$Expression[1:4]), mean(df$Expression[5:8]), mean(df$Expression[9:12]), mean(df$Expression[13:16]), mean(df$Expression[17:20]), mean(df$Expression[21:24]), mean(df$Expression[25:28]), mean(df$Expression[29:32]))
names(avg)<- unique(df$strain)
df$sex<- c("M", "F", "M", "F", "F", "F", "M",
"M", "F", "M", "F", "M", "M", "M",
"F", "F", "F", "M", "F", "M", "F",
"M", "F", "M", "M", "F", "M", "F",
"M", "F", "M", "F")
df$ss<- paste(df$strain,df$sex)
return(df)
}
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
b<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
df2=rbind(df,b)
}
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
a<- getdata(p,{strainsupdate},{normalizeupdate})
View(a)
df=NULL
df=rbind(df,a)
df=NULL
df2=NULL
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
b<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
df2=rbind(df,b)
}
df=NULL
df2=NULL
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
b<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
df2=rbind(df2,b)
}
View(df)
View(df2)
View(cc_df2)
View(df2)
View(df)
View(df)
runApp()
p<- df %>%
ggplot(aes(x=strain, y=Expression, group = ss, fill = ss)) +
geom_boxplot()
library(shiny)
library(readxl)
library(ggplot2)
library(plyr)
library(shinythemes)
library(shinysky)
library(shinyBS)
p<- df %>%
ggplot(aes(x=strain, y=Expression, group = ss, fill = ss)) +
geom_boxplot()
library(dplyr)
p<- df %>%
ggplot(aes(x=strain, y=Expression, group = ss, fill = ss)) +
geom_boxplot()
p<- p+labs(title=paste0("Normalized Protein Expression- ", gene), x="Strain", y = "Avg. Abundance (Normalized)")+
theme_classic()
p<- p+labs(title=paste0("Normalized Protein Expression- ", sort(unique(df$protein))), x="Strain", y = "Avg. Abundance (Normalized)")+
theme_classic()
plot(p)
runApp()
runApp()
runApp()
get_metadata<- reactive({
proteinstouse<- input$proteinoi
proteinstouse<-unlist(strsplit(proteinstouse, ","))
print(proteinstouse)
return(proteinstouse)
})
get_strains<- reactive({
strainstouse<- input$strains
strainstouse<-unlist(strsplit(strainstouse, ","))
print(strainstouse)
return(strainstouse)
})
get_normalized_strain<- reactive({
norm<- input$normstrain
print(norm)
return(norm)
})
#Load in the collaborative cross data frame
cc_df <- read.table("https://github.com/drlaurenwasson/ConlonLab-CollabX/raw/main/files/cc_df.txt", sep = "\t")
genes<- rownames(cc_df)
cc_df2<- read.table("https://github.com/drlaurenwasson/ConlonLab-CollabX/raw/main/files/cc_df2.txt", sep = "\t")
#Get a data frame for the proteins of interest for the strains of interest
getdata<- function(protein,strain,refstrain){
allstrains<- c("PWK", "C57", "AJ", "129", "WSB", "CAS", "NZO", "NOD")
protein<- protein[protein %in% rownames(cc_df)]
df<- as.data.frame(t(cc_df[rownames(cc_df)==protein,]))
df$strain<- c(rep("PWK",4), rep("C57",4), rep("A/J",4), rep("129",4), rep("WSB",4), rep("CAS",4), rep("NZO",4), rep("NOD",4))
df$protein<- protein
colnames(df)[1]<-"Expression"
#Get all of the average expressions for each strain
avg<- c(mean(df$Expression[1:4]), mean(df$Expression[5:8]), mean(df$Expression[9:12]), mean(df$Expression[13:16]), mean(df$Expression[17:20]), mean(df$Expression[21:24]), mean(df$Expression[25:28]), mean(df$Expression[29:32]))
names(avg)<- unique(df$strain)
df$sex<- c("M", "F", "M", "F", "F", "F", "M",
"M", "F", "M", "F", "M", "M", "M",
"F", "F", "F", "M", "F", "M", "F",
"M", "F", "M", "M", "F", "M", "F",
"M", "F", "M", "F")
df$ss<- paste(df$strain,df$sex)
return(df)
}
getnormalizeddata<- function(protein,strain,refstrain){
allstrains<- c("PWK", "C57", "AJ", "129", "WSB", "CAS", "NZO", "NOD")
protein<- protein[protein %in% rownames(cc_df)]
df<- as.data.frame(t(cc_df[rownames(cc_df)==protein,]))
df$strain<- c(rep("PWK",4), rep("C57",4), rep("A/J",4), rep("129",4), rep("WSB",4), rep("CAS",4), rep("NZO",4), rep("NOD",4))
df$protein<- protein
colnames(df)[1]<-"Expression"
#Get all of the average expressions for each strain
avg<- c(mean(df$Expression[1:4]), mean(df$Expression[5:8]), mean(df$Expression[9:12]), mean(df$Expression[13:16]), mean(df$Expression[17:20]), mean(df$Expression[21:24]), mean(df$Expression[25:28]), mean(df$Expression[29:32]))
names(avg)<- unique(df$strain)
df$sex<- c("M", "F", "M", "F", "F", "F", "M",
"M", "F", "M", "F", "M", "M", "M",
"F", "F", "F", "M", "F", "M", "F",
"M", "F", "M", "M", "F", "M", "F",
"M", "F", "M", "F")
df$ss<- paste(df$strain,df$sex)
#Normalize to the reference strain we want
df$Normalized<- df$Expression/(avg[names(avg) %in% refstrain])
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
df2 <- data_summary(df, varname="Normalized",
groupnames=c("strain", "protein"))
head(df2)
return(df2)
}
runApp()
runApp()
proteinstouse="Myh4"
strainstouse=c("PWK", "C57", "AJ",  "129", "WSB", "CAS", "NZO", "NOD")
norm="PWK"
proteinsupdate=proteinstouse
strainsupdate=strainstouse
normalizeupdate=norm
for (p in {proteinsupdate}){
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
#b<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
#df2=rbind(df2,b)
}
}
df=NULL
for (p in {proteinsupdate}){
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
#b<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
#df2=rbind(df2,b)
}
}
View(df)
#Tab 1: Plot protein expression values
#Subset only the strains you want
df<- df[df$strain %in% {strainsupdate},]
View(df)
runApp()
#Get a data frame for the proteins of interest for the strains of interest
getdata<- function(protein,strain,refstrain){
allstrains<- c("PWK", "C57", "AJ", "129", "WSB", "CAS", "NZO", "NOD")
protein<- protein[protein %in% rownames(cc_df)]
df<- as.data.frame(t(cc_df[rownames(cc_df)==protein,]))
df$strain<- c(rep("PWK",4), rep("C57",4), rep("AJ",4), rep("129",4), rep("WSB",4), rep("CAS",4), rep("NZO",4), rep("NOD",4))
df$protein<- protein
colnames(df)[1]<-"Expression"
#Get all of the average expressions for each strain
avg<- c(mean(df$Expression[1:4]), mean(df$Expression[5:8]), mean(df$Expression[9:12]), mean(df$Expression[13:16]), mean(df$Expression[17:20]), mean(df$Expression[21:24]), mean(df$Expression[25:28]), mean(df$Expression[29:32]))
names(avg)<- unique(df$strain)
df$sex<- c("M", "F", "M", "F", "F", "F", "M",
"M", "F", "M", "F", "M", "M", "M",
"F", "F", "F", "M", "F", "M", "F",
"M", "F", "M", "M", "F", "M", "F",
"M", "F", "M", "F")
df$ss<- paste(df$strain,df$sex)
return(df)
}
df=NULL
#Check to see if protein is in the database
if (p %in% rownames(cc_df)){
a<- getdata(p,{strainsupdate},{normalizeupdate})
df=rbind(df,a)
#b<- getnormalizeddata(p,{strainsupdate},{normalizeupdate})
#df2=rbind(df2,b)
}
View(df)
#Tab 1: Plot protein expression values
#Subset only the strains you want
df<- df[df$strain %in% {strainsupdate},]
p<- df %>%
ggplot(aes(x=strain, y=Expression, group = ss, fill = ss)) +
geom_boxplot()
p<- p+labs(title=paste0("Normalized Protein Expression- ", sort(unique(df$protein))), x="Strain", y = "Avg. Abundance (Normalized)")+
theme_classic()
plot(p)
runApp()
runApp()
runApp()
runApp()
p<- df %>%
ggplot(aes(x=strain, y=Expression, group = ss, fill = ss)) +
geom_boxplot()
p<- p+labs(title=paste0("Normalized Protein Expression- ", sort(unique(df$protein))), x="Strain", y = "Avg. Abundance (Normalized)")+
theme_classic()
plot(p)
runApp()
runApp()
p<- df %>%
ggplot(aes(x=strain, y=Expression, group = ss, fill = ss)) +
geom_boxplot()
p
p<- p+labs(title=paste0("Normalized Protein Expression- ", sort(unique(df$protein))), x="Strain", y = "Avg. Abundance (Normalized)")+
theme_classic()
p
View(p)
plot(p)
runApp()
